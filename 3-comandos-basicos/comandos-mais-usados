# Comandos Git Mais Usados

## 1. `git init`
- **Quando usar**: Ao criar um novo repositório Git.
- **Para que serve**: Inicializa um novo repositório Git em um diretório existente, criando um subdiretório `.git`.

```sh
git init
```

## 2. `git clone`
- **Quando usar**: Para copiar um repositório existente.
- **Para que serve**: Faz uma cópia de um repositório existente. Normalmente usado para clonar um repositório remoto, como do GitHub.

```sh
git clone https://github.com/usuario/repo.git
```

## 3. `git add`
- **Quando usar**: Ao preparar mudanças para commit.
- **Para que serve**: Adiciona arquivos modificados ou novos ao índice (staging area), preparando-os para o commit.

```sh
git add arquivo.txt
```

## 4. `git commit`
- **Quando usar**: Após adicionar mudanças com git add.
- **Para que serve**:: Grava as mudanças no repositório local. Cada commit é um ponto na linha do tempo do projeto.

```sh
git commit -m "Mensagem de commit"
```

## 5. `git status`
- **Quando usar**: Para verificar o status do repositório.
- **Para que serve**: Exibe os arquivos modificados, não rastreados e preparados para commit.

```sh
git status
```

## 6. `git log`
- **Quando usar**: Para visualizar o histórico de commits.
- **Para que serve**: Mostra uma lista dos commits realizados no repositório, incluindo mensagens de commit, autores e datas.

```sh
git log
```

## 7. `git pull`
- **Quando usar**: Para atualizar o repositório local.
- **Para que serve**: Faz o fetch e merge das mudanças do repositório remoto para o repositório local.

```sh
git pull origin main
```

## 8. `git push`
- **Quando usar**: Para enviar commits locais para um repositório remoto.
- **Para que serve**: Envia os commits do repositório local para um repositório remoto, como o GitHub.

```sh
git push origin main
```

## 9. `git branch`
- **Quando usar**: Para gerenciar branches.
- **Para que serve**: Lista, cria ou exclui branches. Branches permitem desenvolver funcionalidades independentemente.

```sh
git branch nova-branch
```

##10. `git checkout`
- **Quando usar**: Para trocar de branch ou restaurar arquivos.
- **Para que serve**: Muda para uma branch específica ou restaura arquivos para um estado anterior.

```sh
git checkout nova-branch
```

## 11. `git merge`
- **Quando usar**: Para integrar mudanças de uma branch para outra.
- **Para que serve**: Combina as mudanças de uma branch específica na branch atual.

```sh
git merge nova-branch
```

## 12. `git remote`
- **Quando usar**: Para gerenciar repositórios remotos.
- **Para que serve**: Lista, adiciona e remove repositórios remotos.

```sh
git remote add origin https://github.com/usuario/repo.git
```

## 13. `git fetch`
- **Quando usar**: Para buscar mudanças de um repositório remoto.
- **Para que serve**: Faz o download de commits, arquivos e referências de um repositório remoto para o local sem mesclá-los automaticamente.

```sh
git fetch origin
```

## 14. `git reset`
- **Quando usar**: Para desfazer commits.
- **Para que serve**: Reseta o índice e a árvore de trabalho para o estado de um commit anterior.

```sh
git reset --hard HEAD~1
```

## 15. `git diff`
- **Quando usar**: Para ver mudanças não confirmadas.
- **Para que serve**: Mostra as diferenças entre commits, entre a árvore de trabalho e o índice, etc.

```sh
git diff
```
